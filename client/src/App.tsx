import React, { useEffect, useState } from 'react';
import {
  BrowserRouter as Router,
  Switch,
  Route,
  useLocation,
} from 'react-router-dom';

import {
  TransitionGroup,
  CSSTransition,
} from 'react-transition-group';

import SearchScreen from './components/search-screen/search-screen';
import SymbolScreen from './components/details-screen/details-screen';
import messaging from './helpers/messaging';

import './App.css';

// Generated by https://quicktype.io

export interface ISentimentData {
  res: Sentiment[];
  maxSentiment: Sentiment;
  minSentiment: Sentiment;
  averageSentiment: number;
  maxImg: string;
  minImg: string;
}

export interface Sentiment {
  title: string;
  date: string;
  summary: string;
  positive: number;
  neutral: number;
  negative: number;
  compound: number;
  url?: string;
}


const App = () => {
  const [connected, setConnected] = useState<boolean>(false);
  const [sentimentData, setSentimentData] = useState<ISentimentData>();
  const handleSentiment = (message: any) => {
    if (message.topic === 'sendSentiment') {
      console.log(JSON.parse(message.payloadString));
      setSentimentData(JSON.parse(message.payloadString));
    }
  };

  const handleHistory = (message: any) => {
    if (message.topic === 'sendHistory') {
      console.log(JSON.parse(message.payloadString));
    }
  };

  const handleFuture = (message: any) => {
    if (message.topic === 'sendFuture') {
      console.log(JSON.parse(message.payloadString));
    }
  };

  const handleConnection = () => {
    async function doAsync() {
      const res = await messaging.connectWithPromise();
      setConnected(true);
      messaging.register(handleSentiment);
      messaging.register(handleHistory);
      messaging.register(handleFuture);

      messaging.subscribe('sendSentiment');
      messaging.subscribe('sendHistory');
      messaging.subscribe('sendFuture');
    }
    if (!connected) {
      doAsync();
    }
  };

  handleConnection();
  return (
    <div className="App">
      <Router>
        <TransitionGroup>
          <CSSTransition
            key={1}
            classNames="fade"
            timeout={300}
          >
            <Switch>
              <Route exact path="/">
                <SearchScreen />
              </Route>
              <Route path="/symbol/:symbol">
                <SymbolScreen connected={connected} sentiment={sentimentData} />
              </Route>
            </Switch>
          </CSSTransition>
        </TransitionGroup>
      </Router>
    </div>
  );
};

export default App;
